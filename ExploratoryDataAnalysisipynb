{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Time series analysis & Sales forecasting "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Store sales prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Abstract\n",
    "\n",
    "Company description: Ross Stores is one of the largest retail chains in the United States with its business spread over 39 states across more than a thousand stores. It is a off-price retail chain focusing on high quality department and specialty store brands.\n",
    "\n",
    "**Why is Sales important to Business and How does sales forecasting help business ?**\n",
    "<p>Sales are an important aspect for any business as it generates the revenue to keep the business running. They are also used as the basis for data driven business decisions such as resource allocation and promotional strategies. It is therefore very important to analyze the sales patterns to understanding the market and forecast sales to develop robust business strategies.</p>\n",
    "<br>\n",
    "\n",
    "**How will the daily sales prediction benefit business ?**\n",
    "<p> Daily sales forecasting enables the business to inspect the detailed patterns of sales as well as to have a quicker reaction time in the event of change in these trends. For instance, a drop in total sales would be quickly identified in daily forecasting and can trigger further analysis into the causes resulting in the development of counter strategies to improve the sales.</p>\n",
    "<br>\n",
    "\n",
    "**Sales forecating as a Time series problem ?**\n",
    "<p> Sales forecasting involves predicting future sales for a specified timeframe. Since the data at our disposal contains daily total sales records indexed by their dates, it forms the premise for a time series analysis to analyze the trend and seasonality of the data and model the fluctuation in sales happening over time.</p>\n",
    "\n",
    "\n",
    "The aim of this project is to apply machine learning algorithm into this real world problem\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The dataset is composed of two files:**\n",
    "1. \tSales data: The dataset consists of daily sales records of 1115 stores for January 2013 – August 2015 time period (942 Days) along with details such as store open/close, state holiday, promotional offers, number of customers.\n",
    "2. \tStore data: Each store also has additional details such as store type, promotional offers and competition details  like distance, open since.\n",
    "\n",
    "**The sales data is indexed by date and is also missing records for some stores for certain dates due to refurbishment of stores.**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Goal: <span style = \"font-size: 0.8em; font-weight:normal;\">Explore the data and predict next 3 months of daily sales for more than a thousand stores </span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Business Application"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The daily sales forecast is used to support a variety of data driven business decisions such as:**\n",
    "1. \tStreamlining the hiring process, training and resource allocation to provide improved customer experience.\n",
    "2. \tStabilize inventory management and manage supply chain logistics.\n",
    "3. \tDeveloping promotional strategies to increase sales and total revenue .\n",
    "4. \tIdentifying early warning signs and developing strategies to deal with unexpected and unfavorable situations.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Approach"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Data Cleaning:\n",
    "2. Data Exploration:\n",
    "3. Time Series Data Preparation\n",
    "4. Data Modeling:\n",
    "    1.     Facebook Prophet\n",
    "    2.     LSTM – Deep learning RNN\n",
    "5. Evaluation: RMSE, MAE\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required libraries\n",
    "import numpy as np\n",
    "import pandas as pd, datetime\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Libraries import for data visualization\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>570.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>14130.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>c</td>\n",
       "      <td>c</td>\n",
       "      <td>620.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>29910.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store StoreType Assortment  CompetitionDistance  CompetitionOpenSinceMonth  \\\n",
       "0      1         c          a               1270.0                        9.0   \n",
       "1      2         a          a                570.0                       11.0   \n",
       "2      3         a          a              14130.0                       12.0   \n",
       "3      4         c          c                620.0                        9.0   \n",
       "4      5         a          a              29910.0                        4.0   \n",
       "\n",
       "   CompetitionOpenSinceYear  Promo2  Promo2SinceWeek  Promo2SinceYear  \\\n",
       "0                    2008.0       0              NaN              NaN   \n",
       "1                    2007.0       1             13.0           2010.0   \n",
       "2                    2006.0       1             14.0           2011.0   \n",
       "3                    2009.0       0              NaN              NaN   \n",
       "4                    2015.0       0              NaN              NaN   \n",
       "\n",
       "     PromoInterval  \n",
       "0              NaN  \n",
       "1  Jan,Apr,Jul,Oct  \n",
       "2  Jan,Apr,Jul,Oct  \n",
       "3              NaN  \n",
       "4              NaN  "
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing store data\n",
    "store = pd.read_csv('store.csv')\n",
    "store.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1115, 10)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing train data\n",
    "train = pd.read_csv('train.csv',low_memory = False )\n",
    "train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1017204</th>\n",
       "      <td>1111</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017205</th>\n",
       "      <td>1112</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017206</th>\n",
       "      <td>1113</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017207</th>\n",
       "      <td>1114</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017208</th>\n",
       "      <td>1115</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
       "1017204   1111          2  2013-01-01      0          0     0      0   \n",
       "1017205   1112          2  2013-01-01      0          0     0      0   \n",
       "1017206   1113          2  2013-01-01      0          0     0      0   \n",
       "1017207   1114          2  2013-01-01      0          0     0      0   \n",
       "1017208   1115          2  2013-01-01      0          0     0      0   \n",
       "\n",
       "        StateHoliday  SchoolHoliday  \n",
       "1017204            a              1  \n",
       "1017205            a              1  \n",
       "1017206            a              1  \n",
       "1017207            a              1  \n",
       "1017208            a              1  "
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variable Identification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1115 entries, 0 to 1114\n",
      "Data columns (total 10 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Store                      1115 non-null   int64  \n",
      " 1   StoreType                  1115 non-null   object \n",
      " 2   Assortment                 1115 non-null   object \n",
      " 3   CompetitionDistance        1112 non-null   float64\n",
      " 4   CompetitionOpenSinceMonth  761 non-null    float64\n",
      " 5   CompetitionOpenSinceYear   761 non-null    float64\n",
      " 6   Promo2                     1115 non-null   int64  \n",
      " 7   Promo2SinceWeek            571 non-null    float64\n",
      " 8   Promo2SinceYear            571 non-null    float64\n",
      " 9   PromoInterval              571 non-null    object \n",
      "dtypes: float64(5), int64(2), object(3)\n",
      "memory usage: 87.2+ KB\n"
     ]
    }
   ],
   "source": [
    "store.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1017209 entries, 0 to 1017208\n",
      "Data columns (total 9 columns):\n",
      " #   Column         Non-Null Count    Dtype \n",
      "---  ------         --------------    ----- \n",
      " 0   Store          1017209 non-null  int64 \n",
      " 1   DayOfWeek      1017209 non-null  int64 \n",
      " 2   Date           1017209 non-null  object\n",
      " 3   Sales          1017209 non-null  int64 \n",
      " 4   Customers      1017209 non-null  int64 \n",
      " 5   Open           1017209 non-null  int64 \n",
      " 6   Promo          1017209 non-null  int64 \n",
      " 7   StateHoliday   1017209 non-null  object\n",
      " 8   SchoolHoliday  1017209 non-null  int64 \n",
      "dtypes: int64(7), object(2)\n",
      "memory usage: 69.8+ MB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Date is of object type and needs to be converted inti date-timestamp format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1017209, 9)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1023    942\n",
       "666     942\n",
       "675     942\n",
       "163     942\n",
       "674     942\n",
       "       ... \n",
       "900     758\n",
       "902     758\n",
       "903     758\n",
       "904     758\n",
       "512     758\n",
       "Name: Store, Length: 1115, dtype: int64"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Store'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2015-07-31'"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2013-01-01'"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Date'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Store', 'DayOfWeek', 'Date', 'Sales', 'Customers', 'Open', 'Promo',\n",
       "       'StateHoliday', 'SchoolHoliday'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. There are about a million rows in training data\n",
    "#### 2. Most of the stores have 942 days(time frame of study) and some have less "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking missing values in train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store            0\n",
       "DayOfWeek        0\n",
       "Date             0\n",
       "Sales            0\n",
       "Customers        0\n",
       "Open             0\n",
       "Promo            0\n",
       "StateHoliday     0\n",
       "SchoolHoliday    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking missing values in store data \n",
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### There are no missing values in train data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### To check the level of training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not a single primary key\n"
     ]
    }
   ],
   "source": [
    "#To check level of data - Single primary key\n",
    "for column in train.columns:\n",
    "    if train[column].nunique() == len(train):\n",
    "        print(column)\n",
    "\n",
    "print(\"Not a single primary key\")\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "128\n"
     ]
    }
   ],
   "source": [
    "# Checking for composite keys in train data\n",
    "\n",
    "from itertools import combinations, chain\n",
    "\n",
    "#iterator to go over all possible combination of columns\n",
    "full_list = chain.from_iterable(combinations(train, i) for i in range(1, len(train.columns)+1)) \n",
    "\n",
    "\n",
    "n = len(train.index)\n",
    "\n",
    "res = []\n",
    "for cols in full_list:\n",
    "    cols = list(cols)\n",
    "    if len(train[cols].drop_duplicates().index) == n:\n",
    "        res.append(cols)\n",
    "\n",
    "print(len(res))  # 128"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Level of data is ['Store', 'Date']\n"
     ]
    }
   ],
   "source": [
    "print(\"Level of data is\", res[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combination of Store and Date is unique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking for the time series form of data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1110</th>\n",
       "      <td>1111</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5723</td>\n",
       "      <td>422</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1111</th>\n",
       "      <td>1112</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>9626</td>\n",
       "      <td>767</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1112</th>\n",
       "      <td>1113</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>7289</td>\n",
       "      <td>720</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1113</th>\n",
       "      <td>1114</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>27508</td>\n",
       "      <td>3745</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1114</th>\n",
       "      <td>1115</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8680</td>\n",
       "      <td>538</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1115 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
       "0         1          5  2015-07-31   5263        555     1      1   \n",
       "1         2          5  2015-07-31   6064        625     1      1   \n",
       "2         3          5  2015-07-31   8314        821     1      1   \n",
       "3         4          5  2015-07-31  13995       1498     1      1   \n",
       "4         5          5  2015-07-31   4822        559     1      1   \n",
       "...     ...        ...         ...    ...        ...   ...    ...   \n",
       "1110   1111          5  2015-07-31   5723        422     1      1   \n",
       "1111   1112          5  2015-07-31   9626        767     1      1   \n",
       "1112   1113          5  2015-07-31   7289        720     1      1   \n",
       "1113   1114          5  2015-07-31  27508       3745     1      1   \n",
       "1114   1115          5  2015-07-31   8680        538     1      1   \n",
       "\n",
       "     StateHoliday  SchoolHoliday  \n",
       "0               0              1  \n",
       "1               0              1  \n",
       "2               0              1  \n",
       "3               0              1  \n",
       "4               0              1  \n",
       "...           ...            ...  \n",
       "1110            0              1  \n",
       "1111            0              1  \n",
       "1112            0              1  \n",
       "1113            0              1  \n",
       "1114            0              1  \n",
       "\n",
       "[1115 rows x 9 columns]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#For a single date\n",
    "train.loc[(train['Date'] == '2015-07-31')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For a single date, information of differnt stores are present "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1115</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>5020</td>\n",
       "      <td>546</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2230</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-07-29</td>\n",
       "      <td>4782</td>\n",
       "      <td>523</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3345</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-07-28</td>\n",
       "      <td>5011</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4460</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-07-27</td>\n",
       "      <td>6102</td>\n",
       "      <td>612</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1011635</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-01-05</td>\n",
       "      <td>4997</td>\n",
       "      <td>635</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1012750</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>4486</td>\n",
       "      <td>619</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1013865</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>4327</td>\n",
       "      <td>578</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014980</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>5530</td>\n",
       "      <td>668</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016095</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>942 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
       "0            1          5  2015-07-31   5263        555     1      1   \n",
       "1115         1          4  2015-07-30   5020        546     1      1   \n",
       "2230         1          3  2015-07-29   4782        523     1      1   \n",
       "3345         1          2  2015-07-28   5011        560     1      1   \n",
       "4460         1          1  2015-07-27   6102        612     1      1   \n",
       "...        ...        ...         ...    ...        ...   ...    ...   \n",
       "1011635      1          6  2013-01-05   4997        635     1      0   \n",
       "1012750      1          5  2013-01-04   4486        619     1      0   \n",
       "1013865      1          4  2013-01-03   4327        578     1      0   \n",
       "1014980      1          3  2013-01-02   5530        668     1      0   \n",
       "1016095      1          2  2013-01-01      0          0     0      0   \n",
       "\n",
       "        StateHoliday  SchoolHoliday  \n",
       "0                  0              1  \n",
       "1115               0              1  \n",
       "2230               0              1  \n",
       "3345               0              1  \n",
       "4460               0              1  \n",
       "...              ...            ...  \n",
       "1011635            0              1  \n",
       "1012750            0              1  \n",
       "1013865            0              1  \n",
       "1014980            0              1  \n",
       "1016095            a              1  \n",
       "\n",
       "[942 rows x 9 columns]"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#For a single store\n",
    "train.loc[(train['Store'] == 1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "942"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Date'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store\n",
       "1     942\n",
       "2     942\n",
       "3     942\n",
       "4     942\n",
       "5     942\n",
       "6     942\n",
       "7     942\n",
       "8     942\n",
       "9     942\n",
       "10    942\n",
       "11    942\n",
       "12    942\n",
       "13    758\n",
       "14    942\n",
       "15    942\n",
       "16    942\n",
       "17    942\n",
       "18    942\n",
       "19    942\n",
       "20    758\n",
       "Name: Date, dtype: int64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking at distinct values of dates for each store\n",
    "train.groupby('Store')['Date'].count().head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### It can be seen that sales record for all the 942 dates are present for many stores, so can say that the data we have at our disposal comprises time series as it is an ordered sequence of Sales at equally spaced time intervals(date level)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Store:\n",
    " 1. There are 1115 distinct stores in data\n",
    " \n",
    " Train:\n",
    " 1. Training data has 1M+ observations containing information of 1115 stores \n",
    " \n",
    " 2. Data is for time period from Jan 2013 to August 2015 and has 2+ years worth data\n",
    " \n",
    " 3. Train data is at \"Store and Date\" level, implying the combination of store and date is unique for each row\n",
    " \n",
    " 4. Not all stores have all dates(942) associated with it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. To see frequency distribution\n",
    "    - Bar chart for categorical variables using countplot\n",
    "    - Density plot for numerical variables using distplot \n",
    "      and skewness calculation\n",
    "    \n",
    "2. Outliers detection\n",
    "    - Boxplot\n",
    "\n",
    "3. Missing values detection for each feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.017209e+06</td>\n",
       "      <td>1.017209e+06</td>\n",
       "      <td>1.017209e+06</td>\n",
       "      <td>1.017209e+06</td>\n",
       "      <td>1.017209e+06</td>\n",
       "      <td>1.017209e+06</td>\n",
       "      <td>1.017209e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.584297e+02</td>\n",
       "      <td>3.998341e+00</td>\n",
       "      <td>5.773819e+03</td>\n",
       "      <td>6.331459e+02</td>\n",
       "      <td>8.301067e-01</td>\n",
       "      <td>3.815145e-01</td>\n",
       "      <td>1.786467e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.219087e+02</td>\n",
       "      <td>1.997391e+00</td>\n",
       "      <td>3.849926e+03</td>\n",
       "      <td>4.644117e+02</td>\n",
       "      <td>3.755392e-01</td>\n",
       "      <td>4.857586e-01</td>\n",
       "      <td>3.830564e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.800000e+02</td>\n",
       "      <td>2.000000e+00</td>\n",
       "      <td>3.727000e+03</td>\n",
       "      <td>4.050000e+02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.580000e+02</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>5.744000e+03</td>\n",
       "      <td>6.090000e+02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.380000e+02</td>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>7.856000e+03</td>\n",
       "      <td>8.370000e+02</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.115000e+03</td>\n",
       "      <td>7.000000e+00</td>\n",
       "      <td>4.155100e+04</td>\n",
       "      <td>7.388000e+03</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Store     DayOfWeek         Sales     Customers          Open  \\\n",
       "count  1.017209e+06  1.017209e+06  1.017209e+06  1.017209e+06  1.017209e+06   \n",
       "mean   5.584297e+02  3.998341e+00  5.773819e+03  6.331459e+02  8.301067e-01   \n",
       "std    3.219087e+02  1.997391e+00  3.849926e+03  4.644117e+02  3.755392e-01   \n",
       "min    1.000000e+00  1.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   \n",
       "25%    2.800000e+02  2.000000e+00  3.727000e+03  4.050000e+02  1.000000e+00   \n",
       "50%    5.580000e+02  4.000000e+00  5.744000e+03  6.090000e+02  1.000000e+00   \n",
       "75%    8.380000e+02  6.000000e+00  7.856000e+03  8.370000e+02  1.000000e+00   \n",
       "max    1.115000e+03  7.000000e+00  4.155100e+04  7.388000e+03  1.000000e+00   \n",
       "\n",
       "              Promo  SchoolHoliday  \n",
       "count  1.017209e+06   1.017209e+06  \n",
       "mean   3.815145e-01   1.786467e-01  \n",
       "std    4.857586e-01   3.830564e-01  \n",
       "min    0.000000e+00   0.000000e+00  \n",
       "25%    0.000000e+00   0.000000e+00  \n",
       "50%    0.000000e+00   0.000000e+00  \n",
       "75%    1.000000e+00   0.000000e+00  \n",
       "max    1.000000e+00   1.000000e+00  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# statistical summary of numerical data attributes\n",
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>StateHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1017209</td>\n",
       "      <td>1017209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>942</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>2015-03-19</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1115</td>\n",
       "      <td>986159</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Date StateHoliday\n",
       "count      1017209      1017209\n",
       "unique         942            4\n",
       "top     2015-03-19            0\n",
       "freq          1115       986159"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# statistical summary of categorical data attributes\n",
    "train.describe(include = np.object)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Univariate analysis - Store "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1023    942\n",
       "666     942\n",
       "675     942\n",
       "163     942\n",
       "674     942\n",
       "       ... \n",
       "900     758\n",
       "902     758\n",
       "903     758\n",
       "904     758\n",
       "512     758\n",
       "Name: Store, Length: 1115, dtype: int64"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Store\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Checking the store distribution in data\n",
    "plt.figure(figsize = (12,6))\n",
    "ax = sns.countplot(x = \"Store\", data = train, \n",
    "                   palette=\"Set1\",\n",
    "                   order = train['Store'].iloc[:30].index\n",
    "                  )\n",
    "\n",
    "for p in ax.patches:\n",
    "        ax.annotate('{:.0f}'.format(p.get_height()), \n",
    "                    (p.get_x()+0.0, p.get_height()+5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### All 1115 stores do not have records for all 942 days, some stores have only 758 days of records. So we will further analyze to see the number of such stores having lesser than 942 days of records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking which stores have missing records for some dates\n",
    "\n",
    "def find_stores_with_missing_dates(store_value_counts):\n",
    "    '''\n",
    "    store_value_counts is a series of total count of records for all 1115 stores\n",
    "    '''\n",
    "    stores_with_missing_dates = []\n",
    "\n",
    "    for store, count in store_value_counts.iteritems():\n",
    "        if count < 942:\n",
    "            stores_with_missing_dates.append([store,count])\n",
    "\n",
    "    return(stores_with_missing_dates, len(stores_with_missing_dates))\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calling above function and storing\n",
    "store_value_counts = train[\"Store\"].value_counts()\n",
    "stores_with_missing_dates, total_number_stores_with_missing_dates = find_stores_with_missing_dates(store_value_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "181"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_number_stores_with_missing_dates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### It is seen that there are 181 stores which have fewer than 942 days of records assosiciated with them "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_date_value_counts = train['Date'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2015-03-19    1115\n",
       "2014-01-11    1115\n",
       "2013-02-05    1115\n",
       "2013-04-23    1115\n",
       "2013-05-13    1115\n",
       "              ... \n",
       "2014-09-05     935\n",
       "2014-11-30     935\n",
       "2014-07-31     935\n",
       "2014-09-14     935\n",
       "2014-11-09     935\n",
       "Name: Date, Length: 942, dtype: int64"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_date_value_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking the dates for which records are missing for these 181 above stores \n",
    "\n",
    "def find_dates_missing_store(train_date_value_counts):\n",
    "    \n",
    "    dates_missing_stores = []\n",
    "    \n",
    "    for items in train_date_value_counts.iteritems():\n",
    "        if items[1] < 1115:\n",
    "            dates_missing_stores.append(items[0])\n",
    "            \n",
    "    dates_missing_stores = pd.DataFrame(dates_missing_stores)  #converting into dataframe\n",
    "    dates_missing_stores.columns = ['Date']                    #changing column name\n",
    "    \n",
    "    dates_missing_stores['Date'] = pd.to_datetime(dates_missing_stores.Date)  # Converting date object to datetime\n",
    "    \n",
    "    dates_missing_stores = dates_missing_stores.sort_values(by = 'Date').reset_index(drop = True)  #sorting dates\n",
    "    \n",
    "    return(dates_missing_stores, len(dates_missing_stores))\n",
    "    \n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "dates_missing_stores, total_number_dates_missing_stores  = find_dates_missing_store(train_date_value_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "185"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_number_dates_missing_stores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2013-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2014-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2014-07-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2014-07-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2014-07-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>2014-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>2014-12-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>2014-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>2014-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>2014-12-31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>185 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date\n",
       "0   2013-01-01\n",
       "1   2014-07-01\n",
       "2   2014-07-02\n",
       "3   2014-07-03\n",
       "4   2014-07-04\n",
       "..         ...\n",
       "180 2014-12-27\n",
       "181 2014-12-28\n",
       "182 2014-12-29\n",
       "183 2014-12-30\n",
       "184 2014-12-31\n",
       "\n",
       "[185 rows x 1 columns]"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dates_missing_stores"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "1. There are 185 days(6 months) for which records are not available for all 1115 stores\n",
    "2. For 180 stores out of total 1115 stores available, 6 months of data is missing from July 1 2014 to Dec 31 2014 \n",
    "3. There is 1 store (store ID - 988) has missing record on just 1 day which is Jan 1 2013.\n",
    "\n",
    "Action to be taken:\n",
    "1. Since these 180 stores have missing data for dates in between the range of consideration which is Jan 1 2012 to July 31 2015, this can affect the time series prediction. Hence, we will be handling these \"stores\" according to compatability of different models\n",
    "2. 1 store with store ID of 988 will be imputed with mean values of all columns and this store will not be dropped for building time series model\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Getting stores whose count is 758\n",
    "store_with_758_counts = train['Store'].value_counts()[train['Store'].value_counts() == 758]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "547    758\n",
       "46     758\n",
       "20     758\n",
       "13     758\n",
       "542    758\n",
       "      ... \n",
       "900    758\n",
       "902    758\n",
       "903    758\n",
       "904    758\n",
       "512    758\n",
       "Name: Store, Length: 180, dtype: int64"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "store_with_758_counts = store_with_758_counts.to_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(store_with_758_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Store'], dtype='object')"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Resetting index as previous index is actually store numbers\n",
    "store_with_758_counts.reset_index(level=0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['index', 'Store'], dtype='object')"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "store_with_758_counts.columns = ['Store', 'Count of stores']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>Count of stores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>547</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>46</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>542</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>900</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>902</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>903</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>904</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>180 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Store  Count of stores\n",
       "0      547              758\n",
       "1       46              758\n",
       "2       20              758\n",
       "3       13              758\n",
       "4      542              758\n",
       "..     ...              ...\n",
       "175    900              758\n",
       "176    902              758\n",
       "177    903              758\n",
       "178    904              758\n",
       "179    512              758\n",
       "\n",
       "[180 rows x 2 columns]"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Store', 'Count of stores'], dtype='object')"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      547\n",
       "1       46\n",
       "2       20\n",
       "3       13\n",
       "4      542\n",
       "      ... \n",
       "175    900\n",
       "176    902\n",
       "177    903\n",
       "178    904\n",
       "179    512\n",
       "Name: Store, Length: 180, dtype: int64"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts['Store']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>Count of stores</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>136435</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-01-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136436</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136437</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>1886</td>\n",
       "      <td>502</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136438</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>2743</td>\n",
       "      <td>791</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136439</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>2646</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Store  Count of stores  DayOfWeek        Date  Sales  Customers  Open  \\\n",
       "136435    512              758          6  2013-01-05      0          0     0   \n",
       "136436    512              758          5  2013-01-04      0          0     0   \n",
       "136437    512              758          4  2013-01-03   1886        502     1   \n",
       "136438    512              758          3  2013-01-02   2743        791     1   \n",
       "136439    512              758          2  2013-01-01   2646        625     1   \n",
       "\n",
       "        Promo StateHoliday  SchoolHoliday  \n",
       "136435      0            0              0  \n",
       "136436      0            0              1  \n",
       "136437      0            0              1  \n",
       "136438      0            0              1  \n",
       "136439      0            a              1  "
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# apply \"Vlookup\" in pandas, matching stores values whose count is 758 with the train data \n",
    "# to extract dates for these stores\n",
    "\n",
    "store_758_train_merge = store_with_758_counts.merge(train, on='Store')\n",
    "store_758_train_merge.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "136440"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(store_758_train_merge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017204</th>\n",
       "      <td>1111</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017205</th>\n",
       "      <td>1112</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017206</th>\n",
       "      <td>1113</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017207</th>\n",
       "      <td>1114</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017208</th>\n",
       "      <td>1115</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1017209 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
       "0            1          5  2015-07-31   5263        555     1      1   \n",
       "1            2          5  2015-07-31   6064        625     1      1   \n",
       "2            3          5  2015-07-31   8314        821     1      1   \n",
       "3            4          5  2015-07-31  13995       1498     1      1   \n",
       "4            5          5  2015-07-31   4822        559     1      1   \n",
       "...        ...        ...         ...    ...        ...   ...    ...   \n",
       "1017204   1111          2  2013-01-01      0          0     0      0   \n",
       "1017205   1112          2  2013-01-01      0          0     0      0   \n",
       "1017206   1113          2  2013-01-01      0          0     0      0   \n",
       "1017207   1114          2  2013-01-01      0          0     0      0   \n",
       "1017208   1115          2  2013-01-01      0          0     0      0   \n",
       "\n",
       "        StateHoliday  SchoolHoliday  \n",
       "0                  0              1  \n",
       "1                  0              1  \n",
       "2                  0              1  \n",
       "3                  0              1  \n",
       "4                  0              1  \n",
       "...              ...            ...  \n",
       "1017204            a              1  \n",
       "1017205            a              1  \n",
       "1017206            a              1  \n",
       "1017207            a              1  \n",
       "1017208            a              1  \n",
       "\n",
       "[1017209 rows x 9 columns]"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "180"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_758_train_merge['Store'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = store_758_train_merge.groupby('Store')['Date'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "for y in x.iteritems():\n",
    "    if y[1] != '2013-01-01':\n",
    "        print(y[0])\n",
    "#     else:\n",
    "#         print(\"no\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8821</td>\n",
       "      <td>568</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1127</th>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>7648</td>\n",
       "      <td>474</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2242</th>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-07-29</td>\n",
       "      <td>6648</td>\n",
       "      <td>406</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3357</th>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-07-28</td>\n",
       "      <td>6819</td>\n",
       "      <td>446</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4472</th>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-07-27</td>\n",
       "      <td>7926</td>\n",
       "      <td>527</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1011647</th>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-01-05</td>\n",
       "      <td>4285</td>\n",
       "      <td>344</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1012762</th>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>3848</td>\n",
       "      <td>340</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1013877</th>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>3674</td>\n",
       "      <td>292</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014992</th>\n",
       "      <td>13</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>3737</td>\n",
       "      <td>317</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016107</th>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>758 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
       "12          13          5  2015-07-31   8821        568     1      1   \n",
       "1127        13          4  2015-07-30   7648        474     1      1   \n",
       "2242        13          3  2015-07-29   6648        406     1      1   \n",
       "3357        13          2  2015-07-28   6819        446     1      1   \n",
       "4472        13          1  2015-07-27   7926        527     1      1   \n",
       "...        ...        ...         ...    ...        ...   ...    ...   \n",
       "1011647     13          6  2013-01-05   4285        344     1      0   \n",
       "1012762     13          5  2013-01-04   3848        340     1      0   \n",
       "1013877     13          4  2013-01-03   3674        292     1      0   \n",
       "1014992     13          3  2013-01-02   3737        317     1      0   \n",
       "1016107     13          2  2013-01-01      0          0     0      0   \n",
       "\n",
       "        StateHoliday  SchoolHoliday  \n",
       "12                 0              0  \n",
       "1127               0              0  \n",
       "2242               0              0  \n",
       "3357               0              0  \n",
       "4472               0              0  \n",
       "...              ...            ...  \n",
       "1011647            0              0  \n",
       "1012762            0              1  \n",
       "1013877            0              1  \n",
       "1014992            0              1  \n",
       "1016107            a              1  \n",
       "\n",
       "[758 rows x 9 columns]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train['Store'] == 13]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2015-07-31'"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>Count of stores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>547</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>46</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>542</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>900</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>902</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>903</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>904</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>180 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Store  Count of stores\n",
       "0      547              758\n",
       "1       46              758\n",
       "2       20              758\n",
       "3       13              758\n",
       "4      542              758\n",
       "..     ...              ...\n",
       "175    900              758\n",
       "176    902              758\n",
       "177    903              758\n",
       "178    904              758\n",
       "179    512              758\n",
       "\n",
       "[180 rows x 2 columns]"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1023    False\n",
       "666     False\n",
       "675     False\n",
       "163     False\n",
       "674     False\n",
       "        ...  \n",
       "900      True\n",
       "902      True\n",
       "903      True\n",
       "904      True\n",
       "512      True\n",
       "Name: Store, Length: 1115, dtype: bool"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Store'].value_counts() == 758"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Open\n",
       "0    172817\n",
       "1        54\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[train['Sales'] == 0].groupby('Open')['Sales'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          False\n",
       "1          False\n",
       "2          False\n",
       "3          False\n",
       "4          False\n",
       "           ...  \n",
       "1017204     True\n",
       "1017205     True\n",
       "1017206     True\n",
       "1017207     True\n",
       "1017208     True\n",
       "Name: Sales, Length: 1017209, dtype: bool"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Sales'] == 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "#len(store_list) # 181 stores do not have data for all dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store\n",
       "1       2015-07-31\n",
       "2       2015-07-31\n",
       "3       2015-07-31\n",
       "4       2015-07-31\n",
       "5       2015-07-31\n",
       "           ...    \n",
       "1111    2015-07-31\n",
       "1112    2015-07-31\n",
       "1113    2015-07-31\n",
       "1114    2015-07-31\n",
       "1115    2015-07-31\n",
       "Name: Date, Length: 1115, dtype: object"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby('Store')['Date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "#store_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Store'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1115"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Store'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "758"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_value_counts.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "942"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_value_counts.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "942"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Date'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Univariate analysis - Day Of Week"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Distribution of days of week in training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (12,6))\n",
    "ax = sns.countplot(x = \"DayOfWeek\", data=train, \n",
    "                   palette=\"Set1\",\n",
    "                  )\n",
    "ax.set(xlabel = \"Day of Week\", ylabel = \"Frequency\")\n",
    "ax.set_title('Day of Week frequency')\n",
    "\n",
    "#Display count on Bars: \n",
    "total=len(train)\n",
    "for p in ax.patches:\n",
    "    \tax.annotate('{:.1f}%'.format(100*p.get_height()/total), \n",
    "                    (p.get_x()+0.4, p.get_height()+5),ha='center', va='bottom')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data about all days of the week is present in almost equal proportion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Checking on what days of week, the stores were closed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>291</th>\n",
       "      <td>292</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>876</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1406</th>\n",
       "      <td>292</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990</th>\n",
       "      <td>876</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2521</th>\n",
       "      <td>292</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-07-29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
       "291     292          5  2015-07-31      0          0     0      1   \n",
       "875     876          5  2015-07-31      0          0     0      1   \n",
       "1406    292          4  2015-07-30      0          0     0      1   \n",
       "1990    876          4  2015-07-30      0          0     0      1   \n",
       "2521    292          3  2015-07-29      0          0     0      1   \n",
       "\n",
       "     StateHoliday  SchoolHoliday  \n",
       "291             0              1  \n",
       "875             0              1  \n",
       "1406            0              1  \n",
       "1990            0              1  \n",
       "2521            0              1  "
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_store_closed = train[(train.Open == 0)]\n",
    "train_store_closed.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# what days of week stores were closed the most\n",
    "\n",
    "train_store_closed.hist('DayOfWeek');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### It can be seen that most of the stores were closed on Sunday, which is not unusual. Stores which are closed are because of refurbishment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Function for barchart of categorical variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "def univariate_bar_chart(data_col, x_label, y_label, title):\n",
    "    \n",
    "    plt.figure(figsize=(5,6))\n",
    "    ax = sns.countplot(x=data_col,\n",
    "                       order = data_col.value_counts().index,palette=\"Set1\")\n",
    "    ax.set(xlabel=x_label, ylabel=y_label)\n",
    "    ax.set_title(title)\n",
    "\n",
    "    total=len(data_col) \n",
    "    for p in ax.patches:\n",
    "            ax.annotate('{:.1f}%'.format(100*p.get_height()/total), \n",
    "                        (p.get_x()+0.4, p.get_height()+0.50),ha='center', va='bottom')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate analysis - Open"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "univariate_bar_chart(train['Open'],\"Store Open/Closed\",\"Count of Records\",\"Count of Records for Open/Closed store\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate analysis - Promo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "univariate_bar_chart(train[\"Promo\"],\"Promotional Offers\",\"Count of Records\",\"Count of Records with different\\\n",
    "Promotional Offers\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate of Target Numerical variable - Sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Sales\"].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41551"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Sales\"].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Sales distribution "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Sales Distribution ')"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\"Sales\" distribution\n",
    "\n",
    "plt.figure(figsize=(10,7))\n",
    "plt.xlim(0, 20000)\n",
    "\n",
    "ax = sns.distplot(train[\"Sales\"],bins=100)\n",
    "ax.set(xlabel=\"Sales\", ylabel=\"Probability Density of Sales\")\n",
    "ax.set_title('Sales Distribution ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6414596158103787"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking the skewness\n",
    "train[\"Sales\"].skew()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "172871"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking how many records have sales 0\n",
    "len(train[train['Sales'] == 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.994639253093514"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(len(train[train['Sales'] == 0])/len(train['Sales']))*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "17% of data has sales zero. But this can mean that at certain date, some stores didnot make any sale. However, this might be the case that the store was actually closed at those dates giving sales value of zero. So we will check \"open\" field of train data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Outliers in sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1266a6210>"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Boxplot to see outliers\n",
    "sns.boxplot(data = train[\"Sales\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### This skewness is due to the presence of zero sales. But we will not remove these as we want model to learn the pattern behind zero sales as these are not errors, but actual sales values on particular days"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Analyzing Sales value for Open and Closed stores "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Open\n",
       "0    172817\n",
       "1        54\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking whethe the stores were open or closed when they had 0 sales\n",
    "train[train['Sales'] == 0].groupby('Open')['Sales'].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So, here we can see that sales were mostly zero when store was closed. However, in 54 of the cases sales were zero even when store was \"Open\". So we will analyze these 54 records now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [],
   "source": [
    "open_store_zero_sales = train[(train['Sales'] == 0) & (train['Open'] == 1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>86825</th>\n",
       "      <td>971</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-05-15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142278</th>\n",
       "      <td>674</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-03-26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196938</th>\n",
       "      <td>699</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-02-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>322053</th>\n",
       "      <td>708</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-10-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>330176</th>\n",
       "      <td>357</td>\n",
       "      <td>1</td>\n",
       "      <td>2014-09-22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340348</th>\n",
       "      <td>227</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-09-11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>340860</th>\n",
       "      <td>835</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-09-11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>341795</th>\n",
       "      <td>835</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-09-10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346232</th>\n",
       "      <td>548</td>\n",
       "      <td>5</td>\n",
       "      <td>2014-09-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346734</th>\n",
       "      <td>28</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-09-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>347669</th>\n",
       "      <td>28</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-09-03</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>348604</th>\n",
       "      <td>28</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-09-02</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386065</th>\n",
       "      <td>102</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-07-24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386173</th>\n",
       "      <td>238</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-07-24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386227</th>\n",
       "      <td>303</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-07-24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>386304</th>\n",
       "      <td>387</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-07-24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387652</th>\n",
       "      <td>882</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-07-23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387656</th>\n",
       "      <td>887</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-07-23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>397285</th>\n",
       "      <td>102</td>\n",
       "      <td>6</td>\n",
       "      <td>2014-07-12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>406384</th>\n",
       "      <td>925</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-07-03</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>407532</th>\n",
       "      <td>57</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-07-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437311</th>\n",
       "      <td>1017</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-06-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438426</th>\n",
       "      <td>1017</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-06-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477534</th>\n",
       "      <td>1100</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-04-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478649</th>\n",
       "      <td>1100</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-04-29</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>506085</th>\n",
       "      <td>661</td>\n",
       "      <td>5</td>\n",
       "      <td>2014-04-04</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>512964</th>\n",
       "      <td>850</td>\n",
       "      <td>6</td>\n",
       "      <td>2014-03-29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>525365</th>\n",
       "      <td>986</td>\n",
       "      <td>2</td>\n",
       "      <td>2014-03-18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>531396</th>\n",
       "      <td>327</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-03-12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>561199</th>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>2014-02-13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>562314</th>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>2014-02-12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>582982</th>\n",
       "      <td>623</td>\n",
       "      <td>6</td>\n",
       "      <td>2014-01-25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>584097</th>\n",
       "      <td>623</td>\n",
       "      <td>5</td>\n",
       "      <td>2014-01-24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>591147</th>\n",
       "      <td>983</td>\n",
       "      <td>6</td>\n",
       "      <td>2014-01-18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>592262</th>\n",
       "      <td>983</td>\n",
       "      <td>5</td>\n",
       "      <td>2014-01-17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>744697</th>\n",
       "      <td>663</td>\n",
       "      <td>1</td>\n",
       "      <td>2013-09-02</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>750000</th>\n",
       "      <td>391</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-08-28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>772836</th>\n",
       "      <td>927</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-08-08</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>805283</th>\n",
       "      <td>1039</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-07-10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>806398</th>\n",
       "      <td>1039</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-07-09</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>817174</th>\n",
       "      <td>665</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-06-29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>818289</th>\n",
       "      <td>665</td>\n",
       "      <td>5</td>\n",
       "      <td>2013-06-28</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>843969</th>\n",
       "      <td>700</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-06-05</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872940</th>\n",
       "      <td>681</td>\n",
       "      <td>5</td>\n",
       "      <td>2013-05-10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874853</th>\n",
       "      <td>364</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-05-08</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875968</th>\n",
       "      <td>364</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-05-07</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885113</th>\n",
       "      <td>589</td>\n",
       "      <td>1</td>\n",
       "      <td>2013-04-29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889932</th>\n",
       "      <td>948</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-04-25</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>933937</th>\n",
       "      <td>353</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-03-16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975098</th>\n",
       "      <td>259</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-02-07</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982983</th>\n",
       "      <td>339</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-31</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984098</th>\n",
       "      <td>339</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-01-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990681</th>\n",
       "      <td>232</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999016</th>\n",
       "      <td>762</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Store  DayOfWeek        Date  Sales  Customers  Open  Promo  \\\n",
       "86825     971          5  2015-05-15      0          0     1      0   \n",
       "142278    674          4  2015-03-26      0          0     1      0   \n",
       "196938    699          4  2015-02-05      0          0     1      1   \n",
       "322053    708          3  2014-10-01      0          0     1      1   \n",
       "330176    357          1  2014-09-22      0          0     1      0   \n",
       "340348    227          4  2014-09-11      0          0     1      0   \n",
       "340860    835          4  2014-09-11      0          0     1      0   \n",
       "341795    835          3  2014-09-10      0          0     1      0   \n",
       "346232    548          5  2014-09-05      0          0     1      1   \n",
       "346734     28          4  2014-09-04      0          0     1      1   \n",
       "347669     28          3  2014-09-03      0          0     1      1   \n",
       "348604     28          2  2014-09-02      0          0     1      1   \n",
       "386065    102          4  2014-07-24      0          0     1      0   \n",
       "386173    238          4  2014-07-24      0          0     1      0   \n",
       "386227    303          4  2014-07-24      0          0     1      0   \n",
       "386304    387          4  2014-07-24      0          0     1      0   \n",
       "387652    882          3  2014-07-23      0          0     1      0   \n",
       "387656    887          3  2014-07-23      0          0     1      0   \n",
       "397285    102          6  2014-07-12      0          0     1      0   \n",
       "406384    925          4  2014-07-03      0          0     1      1   \n",
       "407532     57          2  2014-07-01      0          0     1      1   \n",
       "437311   1017          4  2014-06-05      0          0     1      1   \n",
       "438426   1017          3  2014-06-04      0          0     1      1   \n",
       "477534   1100          3  2014-04-30      0          0     1      1   \n",
       "478649   1100          2  2014-04-29      0          3     1      1   \n",
       "506085    661          5  2014-04-04      0          0     1      1   \n",
       "512964    850          6  2014-03-29      0          0     1      0   \n",
       "525365    986          2  2014-03-18      0          0     1      1   \n",
       "531396    327          3  2014-03-12      0          0     1      0   \n",
       "561199     25          4  2014-02-13      0          0     1      0   \n",
       "562314     25          3  2014-02-12      0          0     1      0   \n",
       "582982    623          6  2014-01-25      0          0     1      0   \n",
       "584097    623          5  2014-01-24      0          0     1      1   \n",
       "591147    983          6  2014-01-18      0          0     1      0   \n",
       "592262    983          5  2014-01-17      0          0     1      0   \n",
       "744697    663          1  2013-09-02      0          0     1      0   \n",
       "750000    391          3  2013-08-28      0          0     1      1   \n",
       "772836    927          4  2013-08-08      0          0     1      0   \n",
       "805283   1039          3  2013-07-10      0          0     1      0   \n",
       "806398   1039          2  2013-07-09      0          0     1      0   \n",
       "817174    665          6  2013-06-29      0          0     1      0   \n",
       "818289    665          5  2013-06-28      0          0     1      0   \n",
       "843969    700          3  2013-06-05      0          0     1      1   \n",
       "872940    681          5  2013-05-10      0          0     1      0   \n",
       "874853    364          3  2013-05-08      0          0     1      0   \n",
       "875968    364          2  2013-05-07      0          0     1      0   \n",
       "885113    589          1  2013-04-29      0          0     1      1   \n",
       "889932    948          4  2013-04-25      0          5     1      1   \n",
       "933937    353          6  2013-03-16      0          0     1      0   \n",
       "975098    259          4  2013-02-07      0          0     1      1   \n",
       "982983    339          4  2013-01-31      0          0     1      0   \n",
       "984098    339          3  2013-01-30      0          0     1      0   \n",
       "990681    232          4  2013-01-24      0          0     1      1   \n",
       "999016    762          4  2013-01-17      0          0     1      0   \n",
       "\n",
       "       StateHoliday  SchoolHoliday  \n",
       "86825             0              1  \n",
       "142278            0              0  \n",
       "196938            0              0  \n",
       "322053            0              0  \n",
       "330176            0              0  \n",
       "340348            0              0  \n",
       "340860            0              0  \n",
       "341795            0              0  \n",
       "346232            0              1  \n",
       "346734            0              0  \n",
       "347669            0              1  \n",
       "348604            0              1  \n",
       "386065            0              1  \n",
       "386173            0              1  \n",
       "386227            0              1  \n",
       "386304            0              1  \n",
       "387652            0              1  \n",
       "387656            0              0  \n",
       "397285            0              0  \n",
       "406384            0              0  \n",
       "407532            0              0  \n",
       "437311            0              0  \n",
       "438426            0              0  \n",
       "477534            0              0  \n",
       "478649            0              0  \n",
       "506085            0              0  \n",
       "512964            0              0  \n",
       "525365            0              0  \n",
       "531396            0              0  \n",
       "561199            0              0  \n",
       "562314            0              0  \n",
       "582982            0              0  \n",
       "584097            0              0  \n",
       "591147            0              0  \n",
       "592262            0              0  \n",
       "744697            0              1  \n",
       "750000            0              1  \n",
       "772836            0              1  \n",
       "805283            0              0  \n",
       "806398            0              0  \n",
       "817174            0              0  \n",
       "818289            0              0  \n",
       "843969            0              0  \n",
       "872940            0              0  \n",
       "874853            0              0  \n",
       "875968            0              0  \n",
       "885113            0              0  \n",
       "889932            0              0  \n",
       "933937            0              0  \n",
       "975098            0              0  \n",
       "982983            0              0  \n",
       "984098            0              0  \n",
       "990681            0              0  \n",
       "999016            0              0  "
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "open_store_zero_sales"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We can see that number of customers stepping in most of stores are zero. So, the reason for zero sales could be disruption in accessibility of stores "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# To see the day for which store was open and yet had zero sales\n",
    "plt.figure(figsize = (12,6))\n",
    "ax = sns.countplot(x = \"DayOfWeek\", data = open_store_zero_sales, \n",
    "                   palette=\"Set1\",\n",
    "                  )\n",
    "ax.set(xlabel = \"Day of Week\", ylabel = \"Frequency\")\n",
    "ax.set_title('Day of Week frequency')\n",
    "\n",
    "#Display count on Bars: \n",
    "total=len(open_store_zero_sales)\n",
    "for p in ax.patches:\n",
    "    \tax.annotate('{:.1f}%'.format(100*p.get_height()/total), \n",
    "                    (p.get_x()+0.4, p.get_height()+5),ha='center', va='bottom')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1368x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (19,8))\n",
    "ax = sns.countplot(x = \"Store\", data = open_store_zero_sales, \n",
    "                   order = open_store_zero_sales['Store'].value_counts().iloc[:15].index,\n",
    "                   palette=\"Set1\",\n",
    "                  )\n",
    "ax.set(xlabel = \"Store\", ylabel = \"Frequency\")\n",
    "ax.set_title('Store frequency')\n",
    "\n",
    "#Display count on Bars: \n",
    "total=len(open_store_zero_sales)\n",
    "for p in ax.patches:\n",
    "    \tax.annotate('{:.1f}%'.format(100*p.get_height()/total), \n",
    "                    (p.get_x()+0.4, p.get_height()+5),ha='center', va='bottom')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this, we can see that there are some stores which have not made sales for mare than a single day. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Univariate  - Customers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Customers\"].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7388"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Customers\"].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Customers Distribution ')"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#\"Customers\" distribution\n",
    "\n",
    "plt.figure(figsize=(10,7))\n",
    "plt.xlim(0, 2000)\n",
    "\n",
    "ax=sns.distplot(train[\"Customers\"],bins=200)\n",
    "ax.set(xlabel=\"Customers\", ylabel=\"Probability Density of Customers\")\n",
    "ax.set_title('Customers Distribution ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5986502899508919"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[\"Customers\"].skew()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1156c1c10>"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Boxplot to see outliers\n",
    "sns.boxplot(data = train[\"Customers\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Store data analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>570.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>14130.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>c</td>\n",
       "      <td>c</td>\n",
       "      <td>620.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>29910.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store StoreType Assortment  CompetitionDistance  CompetitionOpenSinceMonth  \\\n",
       "0      1         c          a               1270.0                        9.0   \n",
       "1      2         a          a                570.0                       11.0   \n",
       "2      3         a          a              14130.0                       12.0   \n",
       "3      4         c          c                620.0                        9.0   \n",
       "4      5         a          a              29910.0                        4.0   \n",
       "\n",
       "   CompetitionOpenSinceYear  Promo2  Promo2SinceWeek  Promo2SinceYear  \\\n",
       "0                    2008.0       0              NaN              NaN   \n",
       "1                    2007.0       1             13.0           2010.0   \n",
       "2                    2006.0       1             14.0           2011.0   \n",
       "3                    2009.0       0              NaN              NaN   \n",
       "4                    2015.0       0              NaN              NaN   \n",
       "\n",
       "     PromoInterval  \n",
       "0              NaN  \n",
       "1  Jan,Apr,Jul,Oct  \n",
       "2  Jan,Apr,Jul,Oct  \n",
       "3              NaN  \n",
       "4              NaN  "
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing store data\n",
    "store = pd.read_csv('store.csv')\n",
    "store.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1115, 10)"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1115 entries, 0 to 1114\n",
      "Data columns (total 10 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Store                      1115 non-null   int64  \n",
      " 1   StoreType                  1115 non-null   object \n",
      " 2   Assortment                 1115 non-null   object \n",
      " 3   CompetitionDistance        1112 non-null   float64\n",
      " 4   CompetitionOpenSinceMonth  761 non-null    float64\n",
      " 5   CompetitionOpenSinceYear   761 non-null    float64\n",
      " 6   Promo2                     1115 non-null   int64  \n",
      " 7   Promo2SinceWeek            571 non-null    float64\n",
      " 8   Promo2SinceYear            571 non-null    float64\n",
      " 9   PromoInterval              571 non-null    object \n",
      "dtypes: float64(5), int64(2), object(3)\n",
      "memory usage: 87.2+ KB\n"
     ]
    }
   ],
   "source": [
    "store.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Store                          0\n",
       "StoreType                      0\n",
       "Assortment                     0\n",
       "CompetitionDistance            3\n",
       "CompetitionOpenSinceMonth    354\n",
       "CompetitionOpenSinceYear     354\n",
       "Promo2                         0\n",
       "Promo2SinceWeek              544\n",
       "Promo2SinceYear              544\n",
       "PromoInterval                544\n",
       "dtype: int64"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking missing values in store data \n",
    "store.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     1112.000000\n",
       "mean      5404.901079\n",
       "std       7663.174720\n",
       "min         20.000000\n",
       "25%        717.500000\n",
       "50%       2325.000000\n",
       "75%       6882.500000\n",
       "max      75860.000000\n",
       "Name: CompetitionDistance, dtype: float64"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store['CompetitionDistance'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The variable \"CompetitionDistance\" has just 3 missing values and on seeing its statistics, we can see that mean value of 5404 will not be a good value to impute the missing value because it is getting influenced by the maximum value of 75860, which itself is quite different and LARGE as compared to the values that majority of data points have.\n",
    "\n",
    "#### Instead, median can be used to impute the missing values in this variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bivariate analysis\n",
    "\n",
    "#### To check whether missing values in promo dates is because of the no promotion was applied "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Effects of different features like different Promotional offers and time on Sales\n",
    "2. Correlation matrix to see association with each other and with Sales\n",
    "3. Sales distribution over days of week with absence or presence of promo offers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Promo2\n",
       "0    544\n",
       "Name: Promo2, dtype: int64"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store[store['Promo2SinceWeek'].isnull()].groupby('Promo2')['Promo2'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Promo2\n",
       "0    544\n",
       "Name: Promo2, dtype: int64"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store[store['Promo2SinceYear'].isnull()].groupby('Promo2')['Promo2'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Promo2\n",
       "0    544\n",
       "Name: Promo2, dtype: int64"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store[store['PromoInterval'].isnull()].groupby('Promo2')['Promo2'].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### It can be seen that these 3 promo related columns have null values only where promo code is 0, implying that no promotion was done for those records.\n",
    "### So, they can be safely replaced by \"0\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train data preprocessing\n",
    "\n",
    "1. Extract year, month and date from Date column\n",
    "2. Removing data of 180 stores which has missing values of dates associated with them\n",
    "3. Make Date as index\n",
    "4. Create a new column of \"Sales per customer\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extracting year, month, day and week, and making new column\n",
    "\n",
    "def train_treatment(train):\n",
    "    \n",
    "    # Getting Date in datetime format\n",
    "    train['Date'] = pd.to_datetime(train.Date)    # converting type of column \"Date\" to DATETIME data type\n",
    "#     train.set_index('Date', inplace = True)       # making Date as index of train data\n",
    "    \n",
    "\n",
    "    train['Year'] = train['Date'].dt.year\n",
    "    train['Month'] = train['Date'].dt.month\n",
    "    train['Day'] = train['Date'].dt.day \n",
    "    train['WeekOfYear'] = train['Date'].dt.weekofyear\n",
    "    \n",
    "\n",
    "    # Creating a new column of \"Sales per customer\"\n",
    "    train['SalePerCustomer'] = train['Sales']/train['Customers']\n",
    "    \n",
    "    # Removing records for 180 stores which do not have records for all 942 records\n",
    "        \n",
    "    return(train)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "# copying train dataframe so that function won't change it while passing it as argument\n",
    "train_copy = train.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:13: FutureWarning: Series.dt.weekofyear and Series.dt.week have been deprecated.  Please use Series.dt.isocalendar().week instead.\n",
      "  del sys.path[0]\n"
     ]
    }
   ],
   "source": [
    "# Running the model\n",
    "train_treated = train_treatment(train_copy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>WeekOfYear</th>\n",
       "      <th>SalePerCustomer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>9.482883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>9.702400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>10.126675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>9.342457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>7</td>\n",
       "      <td>31</td>\n",
       "      <td>31</td>\n",
       "      <td>8.626118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017204</th>\n",
       "      <td>1111</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017205</th>\n",
       "      <td>1112</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017206</th>\n",
       "      <td>1113</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017207</th>\n",
       "      <td>1114</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017208</th>\n",
       "      <td>1115</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1017209 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Store  DayOfWeek       Date  Sales  Customers  Open  Promo  \\\n",
       "0            1          5 2015-07-31   5263        555     1      1   \n",
       "1            2          5 2015-07-31   6064        625     1      1   \n",
       "2            3          5 2015-07-31   8314        821     1      1   \n",
       "3            4          5 2015-07-31  13995       1498     1      1   \n",
       "4            5          5 2015-07-31   4822        559     1      1   \n",
       "...        ...        ...        ...    ...        ...   ...    ...   \n",
       "1017204   1111          2 2013-01-01      0          0     0      0   \n",
       "1017205   1112          2 2013-01-01      0          0     0      0   \n",
       "1017206   1113          2 2013-01-01      0          0     0      0   \n",
       "1017207   1114          2 2013-01-01      0          0     0      0   \n",
       "1017208   1115          2 2013-01-01      0          0     0      0   \n",
       "\n",
       "        StateHoliday  SchoolHoliday  Year  Month  Day  WeekOfYear  \\\n",
       "0                  0              1  2015      7   31          31   \n",
       "1                  0              1  2015      7   31          31   \n",
       "2                  0              1  2015      7   31          31   \n",
       "3                  0              1  2015      7   31          31   \n",
       "4                  0              1  2015      7   31          31   \n",
       "...              ...            ...   ...    ...  ...         ...   \n",
       "1017204            a              1  2013      1    1           1   \n",
       "1017205            a              1  2013      1    1           1   \n",
       "1017206            a              1  2013      1    1           1   \n",
       "1017207            a              1  2013      1    1           1   \n",
       "1017208            a              1  2013      1    1           1   \n",
       "\n",
       "         SalePerCustomer  \n",
       "0               9.482883  \n",
       "1               9.702400  \n",
       "2              10.126675  \n",
       "3               9.342457  \n",
       "4               8.626118  \n",
       "...                  ...  \n",
       "1017204              NaN  \n",
       "1017205              NaN  \n",
       "1017206              NaN  \n",
       "1017207              NaN  \n",
       "1017208              NaN  \n",
       "\n",
       "[1017209 rows x 14 columns]"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_treated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1017209, 14)"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_treated.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1017209, 9)"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>6064</td>\n",
       "      <td>625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>8314</td>\n",
       "      <td>821</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>13995</td>\n",
       "      <td>1498</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>4822</td>\n",
       "      <td>559</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek        Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5  2015-07-31   5263        555     1      1            0   \n",
       "1      2          5  2015-07-31   6064        625     1      1            0   \n",
       "2      3          5  2015-07-31   8314        821     1      1            0   \n",
       "3      4          5  2015-07-31  13995       1498     1      1            0   \n",
       "4      5          5  2015-07-31   4822        559     1      1            0   \n",
       "\n",
       "   SchoolHoliday  \n",
       "0              1  \n",
       "1              1  \n",
       "2              1  \n",
       "3              1  \n",
       "4              1  "
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exporting it out\n",
    "train_treated.to_csv('train_treated.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1017209"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_treated)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>570.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>14130.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>c</td>\n",
       "      <td>c</td>\n",
       "      <td>620.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>29910.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store StoreType Assortment  CompetitionDistance  CompetitionOpenSinceMonth  \\\n",
       "0      1         c          a               1270.0                        9.0   \n",
       "1      2         a          a                570.0                       11.0   \n",
       "2      3         a          a              14130.0                       12.0   \n",
       "3      4         c          c                620.0                        9.0   \n",
       "4      5         a          a              29910.0                        4.0   \n",
       "\n",
       "   CompetitionOpenSinceYear  Promo2  Promo2SinceWeek  Promo2SinceYear  \\\n",
       "0                    2008.0       0              NaN              NaN   \n",
       "1                    2007.0       1             13.0           2010.0   \n",
       "2                    2006.0       1             14.0           2011.0   \n",
       "3                    2009.0       0              NaN              NaN   \n",
       "4                    2015.0       0              NaN              NaN   \n",
       "\n",
       "     PromoInterval  \n",
       "0              NaN  \n",
       "1  Jan,Apr,Jul,Oct  \n",
       "2  Jan,Apr,Jul,Oct  \n",
       "3              NaN  \n",
       "4              NaN  "
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1115, 10)"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Store data preprocessing\n",
    "\n",
    "1. Treat missing values in columns of store data\n",
    "\n",
    "    A.) promo related 3 columns which has missing values -> Replace with 0\n",
    "        a.)  Promo2SinceWeek\n",
    "        b.)  Promo2SinceYear\n",
    "        c.)  PromoInterval\n",
    "        \n",
    "    B.) Competition distance -> Replace it with median value\n",
    "    \n",
    "    \n",
    "2. Merge train and store data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Missing value treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "def store_treatment(store):\n",
    "    \n",
    "    # Missing values treatment\n",
    "        # A. Replacing missing values for Competiton distance with median\n",
    "    store['CompetitionDistance'].fillna(store['CompetitionDistance'].median(), inplace = True)\n",
    "    \n",
    "        # B. Replace other missing values by 0\n",
    "    store.fillna(0, inplace = True)\n",
    "    \n",
    "    return(store)\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "# copying store dataframe so that function won't change it while passing it as argument\n",
    "store_copy = store.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [],
   "source": [
    "store_treated = store_treatment(store_copy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>570.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>1</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>14130.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>1</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>Jan,Apr,Jul,Oct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>c</td>\n",
       "      <td>c</td>\n",
       "      <td>620.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>a</td>\n",
       "      <td>a</td>\n",
       "      <td>29910.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store StoreType Assortment  CompetitionDistance  CompetitionOpenSinceMonth  \\\n",
       "0      1         c          a               1270.0                        9.0   \n",
       "1      2         a          a                570.0                       11.0   \n",
       "2      3         a          a              14130.0                       12.0   \n",
       "3      4         c          c                620.0                        9.0   \n",
       "4      5         a          a              29910.0                        4.0   \n",
       "\n",
       "   CompetitionOpenSinceYear  Promo2  Promo2SinceWeek  Promo2SinceYear  \\\n",
       "0                    2008.0       0              0.0              0.0   \n",
       "1                    2007.0       1             13.0           2010.0   \n",
       "2                    2006.0       1             14.0           2011.0   \n",
       "3                    2009.0       0              0.0              0.0   \n",
       "4                    2015.0       0              0.0              0.0   \n",
       "\n",
       "     PromoInterval  \n",
       "0                0  \n",
       "1  Jan,Apr,Jul,Oct  \n",
       "2  Jan,Apr,Jul,Oct  \n",
       "3                0  \n",
       "4                0  "
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_treated.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1115, 10)"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_treated.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Merging store and train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "      <th>Year</th>\n",
       "      <th>...</th>\n",
       "      <th>SalePerCustomer</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.482883</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>5020</td>\n",
       "      <td>546</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.194139</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-07-29</td>\n",
       "      <td>4782</td>\n",
       "      <td>523</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.143403</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-07-28</td>\n",
       "      <td>5011</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>8.948214</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-07-27</td>\n",
       "      <td>6102</td>\n",
       "      <td>612</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.970588</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017204</th>\n",
       "      <td>1115</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-01-05</td>\n",
       "      <td>4771</td>\n",
       "      <td>339</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>14.073746</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017205</th>\n",
       "      <td>1115</td>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>4540</td>\n",
       "      <td>326</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>13.926380</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017206</th>\n",
       "      <td>1115</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>4297</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>14.323333</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017207</th>\n",
       "      <td>1115</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>3697</td>\n",
       "      <td>305</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>12.121311</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017208</th>\n",
       "      <td>1115</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1017209 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Store  DayOfWeek       Date  Sales  Customers  Open  Promo  \\\n",
       "0            1          5 2015-07-31   5263        555     1      1   \n",
       "1            1          4 2015-07-30   5020        546     1      1   \n",
       "2            1          3 2015-07-29   4782        523     1      1   \n",
       "3            1          2 2015-07-28   5011        560     1      1   \n",
       "4            1          1 2015-07-27   6102        612     1      1   \n",
       "...        ...        ...        ...    ...        ...   ...    ...   \n",
       "1017204   1115          6 2013-01-05   4771        339     1      0   \n",
       "1017205   1115          5 2013-01-04   4540        326     1      0   \n",
       "1017206   1115          4 2013-01-03   4297        300     1      0   \n",
       "1017207   1115          3 2013-01-02   3697        305     1      0   \n",
       "1017208   1115          2 2013-01-01      0          0     0      0   \n",
       "\n",
       "        StateHoliday  SchoolHoliday  Year  ...  SalePerCustomer  StoreType  \\\n",
       "0                  0              1  2015  ...         9.482883          c   \n",
       "1                  0              1  2015  ...         9.194139          c   \n",
       "2                  0              1  2015  ...         9.143403          c   \n",
       "3                  0              1  2015  ...         8.948214          c   \n",
       "4                  0              1  2015  ...         9.970588          c   \n",
       "...              ...            ...   ...  ...              ...        ...   \n",
       "1017204            0              1  2013  ...        14.073746          d   \n",
       "1017205            0              1  2013  ...        13.926380          d   \n",
       "1017206            0              1  2013  ...        14.323333          d   \n",
       "1017207            0              1  2013  ...        12.121311          d   \n",
       "1017208            a              1  2013  ...              NaN          d   \n",
       "\n",
       "         Assortment  CompetitionDistance CompetitionOpenSinceMonth  \\\n",
       "0                 a               1270.0                       9.0   \n",
       "1                 a               1270.0                       9.0   \n",
       "2                 a               1270.0                       9.0   \n",
       "3                 a               1270.0                       9.0   \n",
       "4                 a               1270.0                       9.0   \n",
       "...             ...                  ...                       ...   \n",
       "1017204           c               5350.0                       0.0   \n",
       "1017205           c               5350.0                       0.0   \n",
       "1017206           c               5350.0                       0.0   \n",
       "1017207           c               5350.0                       0.0   \n",
       "1017208           c               5350.0                       0.0   \n",
       "\n",
       "        CompetitionOpenSinceYear  Promo2  Promo2SinceWeek  Promo2SinceYear  \\\n",
       "0                         2008.0       0              0.0              0.0   \n",
       "1                         2008.0       0              0.0              0.0   \n",
       "2                         2008.0       0              0.0              0.0   \n",
       "3                         2008.0       0              0.0              0.0   \n",
       "4                         2008.0       0              0.0              0.0   \n",
       "...                          ...     ...              ...              ...   \n",
       "1017204                      0.0       1             22.0           2012.0   \n",
       "1017205                      0.0       1             22.0           2012.0   \n",
       "1017206                      0.0       1             22.0           2012.0   \n",
       "1017207                      0.0       1             22.0           2012.0   \n",
       "1017208                      0.0       1             22.0           2012.0   \n",
       "\n",
       "            PromoInterval  \n",
       "0                       0  \n",
       "1                       0  \n",
       "2                       0  \n",
       "3                       0  \n",
       "4                       0  \n",
       "...                   ...  \n",
       "1017204  Mar,Jun,Sept,Dec  \n",
       "1017205  Mar,Jun,Sept,Dec  \n",
       "1017206  Mar,Jun,Sept,Dec  \n",
       "1017207  Mar,Jun,Sept,Dec  \n",
       "1017208  Mar,Jun,Sept,Dec  \n",
       "\n",
       "[1017209 rows x 23 columns]"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Joining the tables\n",
    "train_store_merged = pd.merge(train_treated, store_treated, on = 'Store', how = 'inner')\n",
    "train_store_merged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Store', 'DayOfWeek', 'Date', 'Sales', 'Customers', 'Open', 'Promo',\n",
       "       'StateHoliday', 'SchoolHoliday', 'Year', 'Month', 'Day', 'WeekOfYear',\n",
       "       'SalePerCustomer', 'StoreType', 'Assortment', 'CompetitionDistance',\n",
       "       'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear', 'Promo2',\n",
       "       'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_store_merged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_stores_with_missing_dates(train_store_merged, store_with_758_counts ):\n",
    "    \n",
    "    store_with_758_counts['marker'] = 1\n",
    "\n",
    "    # join the two, keeping all of df1's indices\n",
    "    joined = pd.merge(train_store_merged, store_with_758_counts, on = 'Store', how='left')\n",
    "    \n",
    "    # extract desired columns where marker is NaN\n",
    "    train_store_merged_180_stores_filtered = joined[pd.isnull(joined['marker'])][train_store_merged.columns]\n",
    "    \n",
    "    return(train_store_merged_180_stores_filtered)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>Count of stores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>547</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>46</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>542</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>900</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>902</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>903</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>904</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>512</td>\n",
       "      <td>758</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>180 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Store  Count of stores\n",
       "0      547              758\n",
       "1       46              758\n",
       "2       20              758\n",
       "3       13              758\n",
       "4      542              758\n",
       "..     ...              ...\n",
       "175    900              758\n",
       "176    902              758\n",
       "177    903              758\n",
       "178    904              758\n",
       "179    512              758\n",
       "\n",
       "[180 rows x 2 columns]"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_with_758_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_store_merged_180_stores_filtered = filter_stores_with_missing_dates(train_store_merged, store_with_758_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "      <th>Year</th>\n",
       "      <th>...</th>\n",
       "      <th>SalePerCustomer</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.482883</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>5020</td>\n",
       "      <td>546</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.194139</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-07-29</td>\n",
       "      <td>4782</td>\n",
       "      <td>523</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.143403</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-07-28</td>\n",
       "      <td>5011</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>8.948214</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-07-27</td>\n",
       "      <td>6102</td>\n",
       "      <td>612</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.970588</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017204</th>\n",
       "      <td>1115</td>\n",
       "      <td>6</td>\n",
       "      <td>2013-01-05</td>\n",
       "      <td>4771</td>\n",
       "      <td>339</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>14.073746</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017205</th>\n",
       "      <td>1115</td>\n",
       "      <td>5</td>\n",
       "      <td>2013-01-04</td>\n",
       "      <td>4540</td>\n",
       "      <td>326</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>13.926380</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017206</th>\n",
       "      <td>1115</td>\n",
       "      <td>4</td>\n",
       "      <td>2013-01-03</td>\n",
       "      <td>4297</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>14.323333</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017207</th>\n",
       "      <td>1115</td>\n",
       "      <td>3</td>\n",
       "      <td>2013-01-02</td>\n",
       "      <td>3697</td>\n",
       "      <td>305</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>12.121311</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1017208</th>\n",
       "      <td>1115</td>\n",
       "      <td>2</td>\n",
       "      <td>2013-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>2013</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>d</td>\n",
       "      <td>c</td>\n",
       "      <td>5350.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>Mar,Jun,Sept,Dec</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>880769 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Store  DayOfWeek       Date  Sales  Customers  Open  Promo  \\\n",
       "0            1          5 2015-07-31   5263        555     1      1   \n",
       "1            1          4 2015-07-30   5020        546     1      1   \n",
       "2            1          3 2015-07-29   4782        523     1      1   \n",
       "3            1          2 2015-07-28   5011        560     1      1   \n",
       "4            1          1 2015-07-27   6102        612     1      1   \n",
       "...        ...        ...        ...    ...        ...   ...    ...   \n",
       "1017204   1115          6 2013-01-05   4771        339     1      0   \n",
       "1017205   1115          5 2013-01-04   4540        326     1      0   \n",
       "1017206   1115          4 2013-01-03   4297        300     1      0   \n",
       "1017207   1115          3 2013-01-02   3697        305     1      0   \n",
       "1017208   1115          2 2013-01-01      0          0     0      0   \n",
       "\n",
       "        StateHoliday  SchoolHoliday  Year  ...  SalePerCustomer  StoreType  \\\n",
       "0                  0              1  2015  ...         9.482883          c   \n",
       "1                  0              1  2015  ...         9.194139          c   \n",
       "2                  0              1  2015  ...         9.143403          c   \n",
       "3                  0              1  2015  ...         8.948214          c   \n",
       "4                  0              1  2015  ...         9.970588          c   \n",
       "...              ...            ...   ...  ...              ...        ...   \n",
       "1017204            0              1  2013  ...        14.073746          d   \n",
       "1017205            0              1  2013  ...        13.926380          d   \n",
       "1017206            0              1  2013  ...        14.323333          d   \n",
       "1017207            0              1  2013  ...        12.121311          d   \n",
       "1017208            a              1  2013  ...              NaN          d   \n",
       "\n",
       "         Assortment  CompetitionDistance CompetitionOpenSinceMonth  \\\n",
       "0                 a               1270.0                       9.0   \n",
       "1                 a               1270.0                       9.0   \n",
       "2                 a               1270.0                       9.0   \n",
       "3                 a               1270.0                       9.0   \n",
       "4                 a               1270.0                       9.0   \n",
       "...             ...                  ...                       ...   \n",
       "1017204           c               5350.0                       0.0   \n",
       "1017205           c               5350.0                       0.0   \n",
       "1017206           c               5350.0                       0.0   \n",
       "1017207           c               5350.0                       0.0   \n",
       "1017208           c               5350.0                       0.0   \n",
       "\n",
       "        CompetitionOpenSinceYear  Promo2  Promo2SinceWeek  Promo2SinceYear  \\\n",
       "0                         2008.0       0              0.0              0.0   \n",
       "1                         2008.0       0              0.0              0.0   \n",
       "2                         2008.0       0              0.0              0.0   \n",
       "3                         2008.0       0              0.0              0.0   \n",
       "4                         2008.0       0              0.0              0.0   \n",
       "...                          ...     ...              ...              ...   \n",
       "1017204                      0.0       1             22.0           2012.0   \n",
       "1017205                      0.0       1             22.0           2012.0   \n",
       "1017206                      0.0       1             22.0           2012.0   \n",
       "1017207                      0.0       1             22.0           2012.0   \n",
       "1017208                      0.0       1             22.0           2012.0   \n",
       "\n",
       "            PromoInterval  \n",
       "0                       0  \n",
       "1                       0  \n",
       "2                       0  \n",
       "3                       0  \n",
       "4                       0  \n",
       "...                   ...  \n",
       "1017204  Mar,Jun,Sept,Dec  \n",
       "1017205  Mar,Jun,Sept,Dec  \n",
       "1017206  Mar,Jun,Sept,Dec  \n",
       "1017207  Mar,Jun,Sept,Dec  \n",
       "1017208  Mar,Jun,Sept,Dec  \n",
       "\n",
       "[880769 rows x 23 columns]"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_store_merged_180_stores_filtered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Store', 'DayOfWeek', 'Date', 'Sales', 'Customers', 'Open', 'Promo',\n",
       "       'StateHoliday', 'SchoolHoliday', 'Year', 'Month', 'Day', 'WeekOfYear',\n",
       "       'SalePerCustomer', 'StoreType', 'Assortment', 'CompetitionDistance',\n",
       "       'CompetitionOpenSinceMonth', 'CompetitionOpenSinceYear', 'Promo2',\n",
       "       'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_store_merged_180_stores_filtered.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1 model ->  with train_store_merged\n",
    "#### 1 model ->  with train_store_merged_180_stores_filtered\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use case 1 : Exporting it out, not storing index in CSV\n",
    "train_store_merged.to_csv('train_store_merged.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use case 2 : Exporting it out\n",
    "train_store_merged_180_stores_filtered.to_csv('train_store_merged_180_stores_filtered.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bivariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "      <th>Year</th>\n",
       "      <th>...</th>\n",
       "      <th>SalePerCustomer</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.482883</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>5020</td>\n",
       "      <td>546</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.194139</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-07-29</td>\n",
       "      <td>4782</td>\n",
       "      <td>523</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.143403</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-07-28</td>\n",
       "      <td>5011</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>8.948214</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-07-27</td>\n",
       "      <td>6102</td>\n",
       "      <td>612</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.970588</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek       Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5 2015-07-31   5263        555     1      1            0   \n",
       "1      1          4 2015-07-30   5020        546     1      1            0   \n",
       "2      1          3 2015-07-29   4782        523     1      1            0   \n",
       "3      1          2 2015-07-28   5011        560     1      1            0   \n",
       "4      1          1 2015-07-27   6102        612     1      1            0   \n",
       "\n",
       "   SchoolHoliday  Year  ...  SalePerCustomer  StoreType  Assortment  \\\n",
       "0              1  2015  ...         9.482883          c           a   \n",
       "1              1  2015  ...         9.194139          c           a   \n",
       "2              1  2015  ...         9.143403          c           a   \n",
       "3              1  2015  ...         8.948214          c           a   \n",
       "4              1  2015  ...         9.970588          c           a   \n",
       "\n",
       "   CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear  \\\n",
       "0               1270.0                       9.0                   2008.0   \n",
       "1               1270.0                       9.0                   2008.0   \n",
       "2               1270.0                       9.0                   2008.0   \n",
       "3               1270.0                       9.0                   2008.0   \n",
       "4               1270.0                       9.0                   2008.0   \n",
       "\n",
       "   Promo2  Promo2SinceWeek  Promo2SinceYear  PromoInterval  \n",
       "0       0              0.0              0.0              0  \n",
       "1       0              0.0              0.0              0  \n",
       "2       0              0.0              0.0              0  \n",
       "3       0              0.0              0.0              0  \n",
       "4       0              0.0              0.0              0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_store_merged.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customers</th>\n",
       "      <th>Sales</th>\n",
       "      <th>SalePerCustomer</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StoreType</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>363541434</td>\n",
       "      <td>3165334859</td>\n",
       "      <td>4.043129e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>156904995</td>\n",
       "      <td>1765392943</td>\n",
       "      <td>2.918350e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>92129705</td>\n",
       "      <td>783221426</td>\n",
       "      <td>9.744876e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>31465621</td>\n",
       "      <td>159231395</td>\n",
       "      <td>7.987612e+04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Customers       Sales  SalePerCustomer\n",
       "StoreType                                        \n",
       "a          363541434  3165334859     4.043129e+06\n",
       "d          156904995  1765392943     2.918350e+06\n",
       "c           92129705   783221426     9.744876e+05\n",
       "b           31465621   159231395     7.987612e+04"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Distribution of sales and customers across differnt store types\n",
    "\n",
    "train_store_merged.groupby('StoreType')['Customers', 'Sales', 'SalePerCustomer'].sum().sort_values('Sales', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Open\n",
       "0             0\n",
       "1    5873180623\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Sales of stores when stores were open and closed\n",
    "\n",
    "train_store_merged.groupby('Open')['Sales'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### All the sales were made when stores were open"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Open\n",
       "0    172817\n",
       "1        54\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_store_merged[train_store_merged['Sales'] == 0].groupby('Open')['Sales'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Open & Sales >0 stores\n",
    "train_store_merged_open = train_store_merged[~((train_store_merged.Open ==0) | (train_store_merged.Sales==0))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>Date</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Open</th>\n",
       "      <th>Promo</th>\n",
       "      <th>StateHoliday</th>\n",
       "      <th>SchoolHoliday</th>\n",
       "      <th>Year</th>\n",
       "      <th>...</th>\n",
       "      <th>SalePerCustomer</th>\n",
       "      <th>StoreType</th>\n",
       "      <th>Assortment</th>\n",
       "      <th>CompetitionDistance</th>\n",
       "      <th>CompetitionOpenSinceMonth</th>\n",
       "      <th>CompetitionOpenSinceYear</th>\n",
       "      <th>Promo2</th>\n",
       "      <th>Promo2SinceWeek</th>\n",
       "      <th>Promo2SinceYear</th>\n",
       "      <th>PromoInterval</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>5263</td>\n",
       "      <td>555</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.482883</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-07-30</td>\n",
       "      <td>5020</td>\n",
       "      <td>546</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.194139</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2015-07-29</td>\n",
       "      <td>4782</td>\n",
       "      <td>523</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.143403</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2015-07-28</td>\n",
       "      <td>5011</td>\n",
       "      <td>560</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>8.948214</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-07-27</td>\n",
       "      <td>6102</td>\n",
       "      <td>612</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2015</td>\n",
       "      <td>...</td>\n",
       "      <td>9.970588</td>\n",
       "      <td>c</td>\n",
       "      <td>a</td>\n",
       "      <td>1270.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Store  DayOfWeek       Date  Sales  Customers  Open  Promo StateHoliday  \\\n",
       "0      1          5 2015-07-31   5263        555     1      1            0   \n",
       "1      1          4 2015-07-30   5020        546     1      1            0   \n",
       "2      1          3 2015-07-29   4782        523     1      1            0   \n",
       "3      1          2 2015-07-28   5011        560     1      1            0   \n",
       "4      1          1 2015-07-27   6102        612     1      1            0   \n",
       "\n",
       "   SchoolHoliday  Year  ...  SalePerCustomer  StoreType  Assortment  \\\n",
       "0              1  2015  ...         9.482883          c           a   \n",
       "1              1  2015  ...         9.194139          c           a   \n",
       "2              1  2015  ...         9.143403          c           a   \n",
       "3              1  2015  ...         8.948214          c           a   \n",
       "4              1  2015  ...         9.970588          c           a   \n",
       "\n",
       "   CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear  \\\n",
       "0               1270.0                       9.0                   2008.0   \n",
       "1               1270.0                       9.0                   2008.0   \n",
       "2               1270.0                       9.0                   2008.0   \n",
       "3               1270.0                       9.0                   2008.0   \n",
       "4               1270.0                       9.0                   2008.0   \n",
       "\n",
       "   Promo2  Promo2SinceWeek  Promo2SinceYear  PromoInterval  \n",
       "0       0              0.0              0.0              0  \n",
       "1       0              0.0              0.0              0  \n",
       "2       0              0.0              0.0              0  \n",
       "3       0              0.0              0.0              0  \n",
       "4       0              0.0              0.0              0  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_store_merged_open.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### There are some days when stores did not make sale even when they were open"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customers</th>\n",
       "      <th>Sales</th>\n",
       "      <th>SalePerCustomer</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StoreType</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>363541434</td>\n",
       "      <td>3165334859</td>\n",
       "      <td>4.043129e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>156904995</td>\n",
       "      <td>1765392943</td>\n",
       "      <td>2.918350e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>92129705</td>\n",
       "      <td>783221426</td>\n",
       "      <td>9.744876e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>31465621</td>\n",
       "      <td>159231395</td>\n",
       "      <td>7.987612e+04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Customers       Sales  SalePerCustomer\n",
       "StoreType                                        \n",
       "a          363541434  3165334859     4.043129e+06\n",
       "d          156904995  1765392943     2.918350e+06\n",
       "c           92129705   783221426     9.744876e+05\n",
       "b           31465621   159231395     7.987612e+04"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of sales and customers across store types\n",
    "train_store_merged.groupby('StoreType')['Customers', 'Sales', 'SalePerCustomer'].sum().sort_values('Sales', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlation Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correlation\n",
    "plt.figure(figsize = (20, 10))\n",
    "sns.heatmap(train_store_merged.corr(), annot = True);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see a strong positive correlation between the amount of Sales and Customers visiting the store. We can also observe a positive correlation between a running promotion (Promo = 1) and number of customers.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/seaborn/categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 766.125x1080 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sales trend over the months and years\n",
    "sns.factorplot(data = train_store_merged_open, x =\"Month\", y = \"Sales\", \n",
    "               col = 'Promo', # per store type in cols\n",
    "               hue = 'Promo2',\n",
    "               row = \"Year\"\n",
    "             );"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/seaborn/categorical.py:3666: UserWarning: The `factorplot` function has been renamed to `catplot`. The original name will be removed in a future release. Please update your code. Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 402.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sales trend over days\n",
    "sns.factorplot(data = train_store_merged_open, x = \"DayOfWeek\", y = \"Sales\", hue = \"Promo\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### EDA insights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusions of EDA\n",
    "\n",
    "**Sales/Promo/Seasonality:** <br>\n",
    "a) The most selling and crowded StoreType is A. <br>\n",
    "b) Customers tends to buy more on Mondays when there are ongoing promotional offers and on Thursdays/Fridays when there is no promotion at all. <br>\n",
    "c) There has been seen positive Effect of availability of promotional offers(promo1) on sales. <br>\n",
    "d) Second promotion (Promo2) doesn't seem to contribute in the increase of sales.<br>\n",
    "e) Sales tend to spike in November and December. So, there is a seasonality factor present in the data.\n",
    "\n",
    "**Open/Close:** <br>\n",
    "f) We can see from the above plot that stores were mostly closed on 7th day i.e Sunday and it makes sense. On other days, they were closed because of a school holiday or/and a state holiday (a = public holiday, b = Easter holiday, c = Christmas, 0 = None)\n",
    "\n",
    "**Time:** <br>\n",
    "g) There were 181 stores which did not have data for all 942 days. They had missing data for 6 months. <br>\n",
    "h) There were 17% data which had ZERO sales out of which most of the days were actually those when stores were closed, however, there were just 54 days for which the stores were open and yet there were zero sales. It might be because of some disruptions in accessibility of store which caused absence of customers in stores\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
